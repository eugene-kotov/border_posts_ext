#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Checkpoint API
"""

import requests
import json
import time
from requests.auth import HTTPBasicAuth

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost"
API_USERNAME = "admin"
API_PASSWORD = "checkpoint2025"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å

def test_health_check():
    """–¢–µ—Å—Ç health check endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"Response: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return True
        else:
            print(f"Error: {response.text}")
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_authentication():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    try:
        # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints", timeout=10)
        if response.status_code == 401:
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (401 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        
        # –¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        auth = HTTPBasicAuth(API_USERNAME, API_PASSWORD)
        response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints", auth=auth, timeout=10)
        print(f"Status with auth: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            print(f"Total checkpoints: {data.get('total', 0)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.text}")
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_checkpoints_endpoint():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞...")
    try:
        auth = HTTPBasicAuth(API_USERNAME, API_PASSWORD)
        response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints", auth=auth, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {data.get('total', 0)} –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞")
            
            if data.get('checkpoints'):
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –ø—Ä–æ–ø—É—Å–∫–∞
                first_checkpoint = data['checkpoints'][0]
                print(f"–ü—Ä–∏–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞:")
                print(f"  ID: {first_checkpoint.get('id', 'N/A')}")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {first_checkpoint.get('name', 'N/A')}")
                print(f"  –°—Ç—Ä–∞–Ω–∞: {first_checkpoint.get('country', 'N/A')}")
                print(f"  –°—Ç–∞—Ç—É—Å: {first_checkpoint.get('status', 'N/A')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_checkpoint_by_id():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ ID
        auth = HTTPBasicAuth(API_USERNAME, API_PASSWORD)
        response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints/ids", auth=auth, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            checkpoint_ids = data.get('ids', [])
            
            if checkpoint_ids:
                # –ü–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞
                first_id = checkpoint_ids[0]
                print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID: {first_id}")
                
                response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints/{first_id}", auth=auth, timeout=10)
                if response.status_code == 200:
                    checkpoint_data = response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞:")
                    print(f"  ID: {checkpoint_data.get('id', 'N/A')}")
                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {checkpoint_data.get('name', 'N/A')}")
                    print(f"  –°—Ç—Ä–∞–Ω–∞: {checkpoint_data.get('country', 'N/A')}")
                    print(f"  –°—Ç–∞—Ç—É—Å: {checkpoint_data.get('status', 'N/A')}")
                    if 'stats' in checkpoint_data:
                        stats = checkpoint_data['stats']
                        print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                    return False
            else:
                print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: {response.status_code}")
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_stats_endpoint():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        auth = HTTPBasicAuth(API_USERNAME, API_PASSWORD)
        response = requests.get(f"{API_BASE_URL}/api/v1/stats", auth=auth, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('total_checkpoints', 0)}")
            print(f"  –ü–æ —Å—Ç—Ä–∞–Ω–∞–º: {data.get('by_country', {})}")
            print(f"  –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: {data.get('average_load', 0)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"Error: {e}")
        return False

def test_rate_limiting():
    """–¢–µ—Å—Ç rate limiting"""
    print("\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    try:
        auth = HTTPBasicAuth(API_USERNAME, API_PASSWORD)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        start_time = time.time()
        success_count = 0
        error_count = 0
        
        for i in range(10):
            response = requests.get(f"{API_BASE_URL}/api/v1/checkpoints", auth=auth, timeout=5)
            if response.status_code == 200:
                success_count += 1
            else:
                error_count += 1
                if response.status_code == 429:
                    print(f"‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç (429 –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1})")
                    break
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        elapsed_time = time.time() - start_time
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
        
        return True
    except Exception as e:
        print(f"Error: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Checkpoint API")
    print("=" * 50)
    
    tests = [
        ("Health Check", test_health_check),
        ("Authentication", test_authentication),
        ("Checkpoints List", test_checkpoints_endpoint),
        ("Checkpoint by ID", test_checkpoint_by_id),
        ("Statistics", test_stats_endpoint),
        ("Rate Limiting", test_rate_limiting),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    exit(main())


