#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
# Usage: ./clean_restart.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMPOSE_FILE="docker-compose.prod.yml"
PROJECT_NAME="checkpoint-prod"

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check Docker Compose command
check_docker_compose() {
    if docker compose version >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker compose"
    elif command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        error "Docker Compose is not installed or not in PATH"
        exit 1
    fi
}

log "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Checkpoint API..."

# Check dependencies
check_docker_compose

# Step 1: Stop all checkpoint containers
log "1Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Checkpoint..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME down 2>/dev/null || true

# Step 2: Stop any containers using port 6379
log "2Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –ø–æ—Ä—Ç 6379..."
docker ps --format "{{.Names}}" | grep -E "(keydb|redis|checkpoint)" | xargs -r docker stop 2>/dev/null || true

# Step 3: Remove all checkpoint containers
log "3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Checkpoint..."
docker ps -a --format "{{.Names}}" | grep -E "(checkpoint|keydb)" | xargs -r docker rm -f 2>/dev/null || true

# Step 4: Remove checkpoint volumes
log "4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–º–æ–≤ Checkpoint..."
docker volume ls --format "{{.Name}}" | grep -E "(checkpoint|keydb)" | xargs -r docker volume rm 2>/dev/null || true

# Step 5: Remove checkpoint networks
log "5Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π Checkpoint..."
docker network ls --format "{{.Name}}" | grep -E "(checkpoint|bridge)" | xargs -r docker network rm 2>/dev/null || true

# Step 6: Clean up dangling images
log "6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image prune -f

# Step 7: Clean up dangling volumes
log "7Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–º–æ–≤..."
docker volume prune -f

# Step 8: Clean up dangling networks
log "8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π..."
docker network prune -f

# Step 9: Verify port 6379 is free
log "9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 6379..."
if command -v netstat &> /dev/null; then
    local port_check=$(netstat -tln 2>/dev/null | grep ":6379" || true)
elif command -v ss &> /dev/null; then
    local port_check=$(ss -tln | grep ":6379" || true)
else
    local port_check=""
fi

if [ -n "$port_check" ]; then
    warning "–ü–æ—Ä—Ç 6379 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç:"
    echo "$port_check"
    warning "–ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç 6380..."
    COMPOSE_FILE="docker-compose.prod-alt.yml"
fi

# Step 10: Create local data directory
log "üîü –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p ./keydb_data
chmod 755 ./keydb_data

# Step 11: Start fresh containers
log "1Ô∏è‚É£1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME up -d --build

# Step 12: Wait for services
log "1Ô∏è‚É£2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 20

# Step 13: Check status
log "1Ô∏è‚É£3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME ps

# Step 14: Test services
log "1Ô∏è‚É£4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# Test KeyDB
local keydb_port="6379"
if [ "$COMPOSE_FILE" = "docker-compose.prod-alt.yml" ]; then
    keydb_port="6380"
fi

if $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME exec -T keydb keydb-cli ping | grep -q "PONG"; then
    success "‚úÖ KeyDB —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $keydb_port"
else
    error "‚ùå KeyDB –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Test API
if command -v curl &> /dev/null; then
    if curl -s http://localhost/health > /dev/null; then
        success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        warning "‚ö†Ô∏è API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health"
    fi
else
    warning "‚ö†Ô∏è curl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
fi

# Step 15: Show logs
log "1Ô∏è‚É£5Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ KeyDB..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs --tail=10 keydb

echo ""
success "üéâ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
echo ""
echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME ps
echo ""
echo -e "${YELLOW}üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs -f"
echo "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME down"
echo "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KeyDB: keydb-cli -p $keydb_port"
echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ API: curl http://localhost/health"
