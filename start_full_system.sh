#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º
# Usage: ./start_full_system.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMPOSE_FILE="docker-compose.full.yml"
PROJECT_NAME="checkpoint-full"

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check Docker Compose command
check_docker_compose() {
    if docker compose version >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker compose"
    elif command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        error "Docker Compose is not installed or not in PATH"
        exit 1
    fi
}

log "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Checkpoint (API + Parser + KeyDB + Nginx)..."

# Check dependencies
check_docker_compose

# Stop existing containers
log "1Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
$DOCKER_COMPOSE -f docker-compose.prod.yml -p checkpoint-prod down 2>/dev/null || true
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME down 2>/dev/null || true

# Remove obsolete version warning by creating a clean compose file
log "2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ docker-compose —Ñ–∞–π–ª–∞..."
if [ -f "$COMPOSE_FILE" ]; then
    # Remove version line to avoid warning
    sed '/^version:/d' $COMPOSE_FILE > ${COMPOSE_FILE}.tmp
    mv ${COMPOSE_FILE}.tmp $COMPOSE_FILE
fi

# Start full system
log "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME up -d --build

# Wait for services
log "4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# Check status
log "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME ps

# Test services
log "6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# Test KeyDB
if $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME exec -T keydb keydb-cli ping | grep -q "PONG"; then
    success "‚úÖ KeyDB —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "‚ùå KeyDB –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# Test API instances
log "6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤..."
api_instances=("api1" "api2" "api3")
for api in "${api_instances[@]}"; do
    if $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME exec -T $api wget --quiet --tries=1 --spider http://localhost:8080/health; then
        success "‚úÖ $api —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        warning "‚ö†Ô∏è $api –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
done

# Test load balancer
if command -v curl &> /dev/null; then
    log "7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏..."
    for i in {1..5}; do
        response=$(curl -s http://localhost/health 2>/dev/null || echo "ERROR")
        if [[ "$response" == *"healthy"* ]] || [[ "$response" == *"UP"* ]]; then
            success "‚úÖ –ó–∞–ø—Ä–æ—Å $i —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–µ–Ω"
        else
            warning "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å $i —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è"
        fi
        sleep 1
    done
else
    warning "‚ö†Ô∏è curl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"
fi

# Test Parser
log "8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞..."
parser_logs=$($DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs parser | tail -10)
if echo "$parser_logs" | grep -q "‚úÖ\|üîÑ\|üìä\|started\|running"; then
    success "‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞:"
    echo "$parser_logs"
else
    warning "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    echo "–õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞:"
    echo "$parser_logs"
fi

# Check KeyDB data
log "9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ KeyDB..."
checkpoint_count=$($DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME exec -T keydb keydb-cli scard checkpoints:all 2>/dev/null || echo "0")
echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –≤ KeyDB: $checkpoint_count"

if [ "$checkpoint_count" -gt 0 ]; then
    success "‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø–æ–ª–Ω–∏–ª KeyDB –¥–∞–Ω–Ω—ã–º–∏"
else
    warning "‚ö†Ô∏è –í KeyDB –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤"
fi

echo ""
success "üéâ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Checkpoint –∑–∞–ø—É—â–µ–Ω–∞!"
echo ""
echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
$DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME ps
echo ""
echo -e "${YELLOW}üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs -f"
echo "‚Ä¢ –õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs -f parser"
echo "‚Ä¢ –õ–æ–≥–∏ API: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs -f api"
echo "‚Ä¢ –õ–æ–≥–∏ KeyDB: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME logs -f keydb"
echo "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: $DOCKER_COMPOSE -f $COMPOSE_FILE -p $PROJECT_NAME down"
echo "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KeyDB: keydb-cli -h localhost -p 6379"
echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ API: curl http://localhost/health"
echo ""
echo -e "${GREEN}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
echo "‚Ä¢ API: http://localhost/health"
echo "‚Ä¢ Nginx: http://localhost/"
echo "‚Ä¢ KeyDB: localhost:6379"
