#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KeyDB
"""

import redis
from datetime import datetime

def test_keydb_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KeyDB"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KeyDB...")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KeyDB
        client = redis.Redis(
            host='localhost',
            port=6379,
            db=0,
            decode_responses=True,
            socket_connect_timeout=5,
            socket_timeout=5
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client.ping()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KeyDB —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        test_key = "test:connection"
        test_value = f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {datetime.now().isoformat()}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        client.set(test_key, test_value)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {test_key}")
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        retrieved_value = client.get(test_key)
        print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {retrieved_value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if retrieved_value == test_value:
            print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç - KeyDB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        client.delete(test_key)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        info = client.info()
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ KeyDB —Å–µ—Ä–≤–µ—Ä–µ:")
        print(f"- –í–µ—Ä—Å–∏—è: {info.get('redis_version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"- –†–µ–∂–∏–º: {info.get('redis_mode', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: {info.get('used_memory_human', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"- –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {info.get('connected_clients', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return True
        
    except redis.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KeyDB: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ KeyDB –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:6379")
        return False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_keydb_connection()
    
    if success:
        print("\nüéâ KeyDB –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä: python new_checkpoint_data.py")
    else:
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ KeyDB:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ KeyDB: https://docs.keydb.dev/docs/installation/")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: keydb-server")
        print("3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç: python test_keydb.py")
